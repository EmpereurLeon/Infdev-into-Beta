--- a/net/minecraft/src/WorldGenBigTree.java
+++ b/net/minecraft/src/WorldGenBigTree.java
@@ -1,257 +1,62 @@
 package net.minecraft.src;
 
 import java.util.Random;
-
-public class WorldGenBigTree extends WorldGenerator {
-	static final byte[] field_882_a = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};
-	Random field_881_b = new Random();
-	World worldObj;
-	int[] basePos = new int[]{0, 0, 0};
-	int field_878_e = 0;
-	int height;
-	double field_876_g = 0.618D;
-	double field_875_h = 1.0D;
-	double field_874_i = 0.381D;
-	double field_873_j = 1.0D;
-	double field_872_k = 1.0D;
-	int field_871_l = 1;
-	int field_870_m = 12;
-	int field_869_n = 4;
-	int[][] field_868_o;
-
-	void func_521_a() {
-		this.height = (int)((double)this.field_878_e * this.field_876_g);
-		if(this.height >= this.field_878_e) {
-			this.height = this.field_878_e - 1;
-		}
-
-		int i1 = (int)(1.382D + Math.pow(this.field_872_k * (double)this.field_878_e / 13.0D, 2.0D));
-		if(i1 < 1) {
-			i1 = 1;
-		}
-
-		int[][] i2 = new int[i1 * this.field_878_e][4];
-		int i3 = this.basePos[1] + this.field_878_e - this.field_869_n;
-		int i4 = 1;
-		int i5 = this.basePos[1] + this.height;
-		int i6 = i3 - this.basePos[1];
-		i2[0][0] = this.basePos[0];
-		i2[0][1] = i3;
-		i2[0][2] = this.basePos[2];
-		i2[0][3] = i5;
-		--i3;
-
-		while(true) {
-			while(i6 >= 0) {
-				int i7 = 0;
-				float f8 = this.func_528_a(i6);
-				if(f8 < 0.0F) {
-					--i3;
-					--i6;
-				} else {
-					for(double d9 = 0.5D; i7 < i1; ++i7) {
-						double d11 = this.field_873_j * (double)f8 * ((double)this.field_881_b.nextFloat() + 0.328D);
-						double d13 = (double)this.field_881_b.nextFloat() * 2.0D * 3.14159D;
-						int i15 = MathHelper.floor_double(d11 * Math.sin(d13) + (double)this.basePos[0] + d9);
-						int i16 = MathHelper.floor_double(d11 * Math.cos(d13) + (double)this.basePos[2] + d9);
-						int[] i17 = new int[]{i15, i3, i16};
-						int[] i18 = new int[]{i15, i3 + this.field_869_n, i16};
-						if(this.func_524_a(i17, i18) == -1) {
-							int[] i19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-							double d20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - i17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - i17[2]), 2.0D));
-							double d22 = d20 * this.field_874_i;
-							if((double)i17[1] - d22 > (double)i5) {
-								i19[1] = i5;
-							} else {
-								i19[1] = (int)((double)i17[1] - d22);
-							}
-
-							if(this.func_524_a(i19, i17) == -1) {
-								i2[i4][0] = i15;
-								i2[i4][1] = i3;
-								i2[i4][2] = i16;
-								i2[i4][3] = i19[1];
-								++i4;
-							}
-						}
-					}
-
-					--i3;
-					--i6;
-				}
-			}
-
-			this.field_868_o = new int[i4][4];
-			System.arraycopy(i2, 0, this.field_868_o, 0, i4);
-			return;
-		}
-	}
-
-	void func_523_a(int i1, int i2, int i3, float f4, byte b5, int i6) {
-		int i7 = (int)((double)f4 + 0.618D);
-		byte b8 = field_882_a[b5];
-		byte b9 = field_882_a[b5 + 3];
-		int[] i10 = new int[]{i1, i2, i3};
-		int[] i11 = new int[]{0, 0, 0};
-		int i12 = -i7;
-		int i13 = -i7;
-
-		label32:
-		for(i11[b5] = i10[b5]; i12 <= i7; ++i12) {
-			i11[b8] = i10[b8] + i12;
-			i13 = -i7;
-
-			while(true) {
-				while(true) {
-					if(i13 > i7) {
-						continue label32;
-					}
-
-					double d15 = Math.sqrt(Math.pow((double)Math.abs(i12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(i13) + 0.5D, 2.0D));
-					if(d15 > (double)f4) {
-						++i13;
-					} else {
-						i11[b9] = i10[b9] + i13;
-						int i14 = this.worldObj.getBlockId(i11[0], i11[1], i11[2]);
-						if(i14 != 0 && i14 != 18) {
-							++i13;
-						} else {
-							this.worldObj.setBlock(i11[0], i11[1], i11[2], i6);
-							++i13;
-						}
-					}
-				}
-			}
-		}
-
-	}
-
-	float func_528_a(int i1) {
-		if((double)i1 < (double)((float)this.field_878_e) * 0.3D) {
-			return -1.618F;
-		} else {
-			float f2 = (float)this.field_878_e / 2.0F;
-			float f3 = (float)this.field_878_e / 2.0F - (float)i1;
-			float f4;
-			if(f3 == 0.0F) {
-				f4 = f2;
-			} else if(Math.abs(f3) >= f2) {
-				f4 = 0.0F;
-			} else {
-				f4 = (float)Math.sqrt(Math.pow((double)Math.abs(f2), 2.0D) - Math.pow((double)Math.abs(f3), 2.0D));
-			}
-
-			f4 *= 0.5F;
-			return f4;
-		}
-	}
-
-	float func_526_b(int i1) {
-		return i1 >= 0 && i1 < this.field_869_n ? (i1 != 0 && i1 != this.field_869_n - 1 ? 3.0F : 2.0F) : -1.0F;
-	}
-
-	void func_520_a(int i1, int i2, int i3) {
-		int i4 = i2;
-
-		for(int i5 = i2 + this.field_869_n; i4 < i5; ++i4) {
-			float f6 = this.func_526_b(i4 - i2);
-			this.func_523_a(i1, i4, i3, f6, (byte)1, 18);
-		}
-
-	}
-
-	void func_522_a(int[] i1, int[] i2, int i3) {
-		int[] i4 = new int[]{0, 0, 0};
-		byte b5 = 0;
-
-		byte b6;
-		for(b6 = 0; b5 < 3; ++b5) {
-			i4[b5] = i2[b5] - i1[b5];
-			if(Math.abs(i4[b5]) > Math.abs(i4[b6])) {
-				b6 = b5;
-			}
-		}
-
-		if(i4[b6] != 0) {
-			byte b7 = field_882_a[b6];
-			byte b8 = field_882_a[b6 + 3];
-			byte b9;
-			if(i4[b6] > 0) {
-				b9 = 1;
-			} else {
-				b9 = -1;
-			}
-
-			double d10 = (double)i4[b7] / (double)i4[b6];
-			double d12 = (double)i4[b8] / (double)i4[b6];
-			int[] i14 = new int[]{0, 0, 0};
-			int i15 = 0;
-
-			for(int i16 = i4[b6] + b9; i15 != i16; i15 += b9) {
-				i14[b6] = MathHelper.floor_double((double)(i1[b6] + i15) + 0.5D);
-				i14[b7] = MathHelper.floor_double((double)i1[b7] + (double)i15 * d10 + 0.5D);
-				i14[b8] = MathHelper.floor_double((double)i1[b8] + (double)i15 * d12 + 0.5D);
-				this.worldObj.setBlock(i14[0], i14[1], i14[2], i3);
-			}
-
-		}
-	}
-
-	void func_518_b() {
-		int i1 = 0;
-
-		for(int i2 = this.field_868_o.length; i1 < i2; ++i1) {
-			int i3 = this.field_868_o[i1][0];
-			int i4 = this.field_868_o[i1][1];
-			int i5 = this.field_868_o[i1][2];
-			this.func_520_a(i3, i4, i5);
-		}
-
-	}
-
-	boolean func_527_c(int i1) {
-		return (double)i1 >= (double)this.field_878_e * 0.2D;
-	}
-
-	void func_529_c() {
-		int i1 = this.basePos[0];
-		int i2 = this.basePos[1];
-		int i3 = this.basePos[1] + this.height;
-		int i4 = this.basePos[2];
-		int[] i5 = new int[]{i1, i2, i4};
-		int[] i6 = new int[]{i1, i3, i4};
-		this.func_522_a(i5, i6, 17);
-		if(this.field_871_l == 2) {
-			++i5[0];
-			++i6[0];
-			this.func_522_a(i5, i6, 17);
-			++i5[2];
-			++i6[2];
-			this.func_522_a(i5, i6, 17);
-			i5[0] += -1;
-			i6[0] += -1;
-			this.func_522_a(i5, i6, 17);
-		}
-
-	}
-
-	void func_525_d() {
-		int i1 = 0;
-		int i2 = this.field_868_o.length;
-
-		for(int[] i3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; i1 < i2; ++i1) {
-			int[] i4 = this.field_868_o[i1];
-			int[] i5 = new int[]{i4[0], i4[1], i4[2]};
-			i3[1] = i4[3];
-			int i6 = i3[1] - this.basePos[1];
-			if(this.func_527_c(i6)) {
-				this.func_522_a(i3, i5, 17);
-			}
-		}
-
-	}
-
-	int func_524_a(int[] i1, int[] i2) {
+import util.MathHelper;
+
+public final class WorldGenBigTree extends WorldGenerator {
+	private static byte[] otherCoordPairs = new byte[]{(byte)2, (byte)0, (byte)0, (byte)1, (byte)2, (byte)1};
+	private Random rand = new Random();
+	private World worldObj;
+	private int[] basePos = new int[]{0, 0, 0};
+	private int heightLimit = 0;
+	private int height;
+	private double heightAttenuation = 0.618D;
+	private double branchSlope = 0.381D;
+	private double scaleWidth = 1.0D;
+	private double leafDensity = 1.0D;
+	private int trunkSize = 1;
+	private int heightLimitLimit = 12;
+	private int leafDistanceLimit = 4;
+	private int[][] leafNodes;
+
+	private void placeBlockLine(int[] i1, int[] i2, int i3) {
+		int[] i15 = new int[]{0, 0, 0};
+		byte b4 = 0;
+
+		byte b5;
+		for(b5 = 0; b4 < 3; ++b4) {
+			i15[b4] = i2[b4] - i1[b4];
+			if(Math.abs(i15[b4]) > Math.abs(i15[b5])) {
+				b5 = b4;
+			}
+		}
+
+		if(i15[b5] != 0) {
+			byte b14 = otherCoordPairs[b5];
+			b4 = otherCoordPairs[b5 + 3];
+			byte b6;
+			if(i15[b5] > 0) {
+				b6 = 1;
+			} else {
+				b6 = -1;
+			}
+
+			double d10 = (double)i15[b14] / (double)i15[b5];
+			double d12 = (double)i15[b4] / (double)i15[b5];
+			int[] i7 = new int[]{0, 0, 0};
+			int i8 = 0;
+
+			for(i3 = i15[b5] + b6; i8 != i3; i8 += b6) {
+				i7[b5] = MathHelper.floor_double((double)(i1[b5] + i8) + 0.5D);
+				i7[b14] = MathHelper.floor_double((double)i1[b14] + (double)i8 * d10 + 0.5D);
+				i7[b4] = MathHelper.floor_double((double)i1[b4] + (double)i8 * d12 + 0.5D);
+				this.worldObj.setTileNoUpdate(i7[0], i7[1], i7[2], 17);
+			}
+
+		}
+	}
+
+	private int checkBlockLine(int[] i1, int[] i2) {
 		int[] i3 = new int[]{0, 0, 0};
 		byte b4 = 0;
 
@@ -266,82 +71,242 @@
 		if(i3[b5] == 0) {
 			return -1;
 		} else {
-			byte b6 = field_882_a[b5];
-			byte b7 = field_882_a[b5 + 3];
-			byte b8;
+			byte b14 = otherCoordPairs[b5];
+			b4 = otherCoordPairs[b5 + 3];
+			byte b6;
 			if(i3[b5] > 0) {
-				b8 = 1;
+				b6 = 1;
 			} else {
-				b8 = -1;
+				b6 = -1;
 			}
 
-			double d9 = (double)i3[b6] / (double)i3[b5];
-			double d11 = (double)i3[b7] / (double)i3[b5];
-			int[] i13 = new int[]{0, 0, 0};
-			int i14 = 0;
+			double d9 = (double)i3[b14] / (double)i3[b5];
+			double d11 = (double)i3[b4] / (double)i3[b5];
+			int[] i7 = new int[]{0, 0, 0};
+			int i8 = 0;
 
 			int i15;
-			for(i15 = i3[b5] + b8; i14 != i15; i14 += b8) {
-				i13[b5] = i1[b5] + i14;
-				i13[b6] = MathHelper.floor_double((double)i1[b6] + (double)i14 * d9);
-				i13[b7] = MathHelper.floor_double((double)i1[b7] + (double)i14 * d11);
-				int i16 = this.worldObj.getBlockId(i13[0], i13[1], i13[2]);
-				if(i16 != 0 && i16 != 18) {
+			for(i15 = i3[b5] + b6; i8 != i15; i8 += b6) {
+				i7[b5] = i1[b5] + i8;
+				i7[b14] = (int)((double)i1[b14] + (double)i8 * d9);
+				i7[b4] = (int)((double)i1[b4] + (double)i8 * d11);
+				int i13;
+				if((i13 = this.worldObj.getBlockId(i7[0], i7[1], i7[2])) != 0 && i13 != 18) {
 					break;
 				}
 			}
 
-			return i14 == i15 ? -1 : Math.abs(i14);
-		}
-	}
-
-	boolean func_519_e() {
-		int[] i1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-		int[] i2 = new int[]{this.basePos[0], this.basePos[1] + this.field_878_e - 1, this.basePos[2]};
-		int i3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-		if(i3 != 2 && i3 != 3) {
-			return false;
-		} else {
-			int i4 = this.func_524_a(i1, i2);
-			if(i4 == -1) {
-				return true;
-			} else if(i4 < 6) {
-				return false;
-			} else {
-				this.field_878_e = i4;
-				return true;
-			}
-		}
-	}
-
-	public void func_517_a(double d1, double d3, double d5) {
-		this.field_870_m = (int)(d1 * 12.0D);
-		if(d1 > 0.5D) {
-			this.field_869_n = 5;
-		}
-
-		this.field_873_j = d3;
-		this.field_872_k = d5;
-	}
-
-	public boolean generate(World world1, Random random2, int i3, int i4, int i5) {
+			return i8 == i15 ? -1 : Math.abs(i8);
+		}
+	}
+
+	public final void setScale(double d1, double d3, double d5) {
+		this.heightLimitLimit = 12;
+		this.leafDistanceLimit = 5;
+		this.scaleWidth = 1.0D;
+		this.leafDensity = 1.0D;
+	}
+
+	public final boolean generate(World world1, Random random2, int i3, int i4, int i5) {
 		this.worldObj = world1;
 		long j6 = random2.nextLong();
-		this.field_881_b.setSeed(j6);
+		this.rand.setSeed(j6);
 		this.basePos[0] = i3;
 		this.basePos[1] = i4;
 		this.basePos[2] = i5;
-		if(this.field_878_e == 0) {
-			this.field_878_e = 5 + this.field_881_b.nextInt(this.field_870_m);
-		}
-
-		if(!this.func_519_e()) {
+		if(this.heightLimit == 0) {
+			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
+		}
+
+		int[] i39 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+		int[] i41 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
+		boolean z10000;
+		if((i4 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2])) != 2 && i4 != 3) {
+			z10000 = false;
+		} else if((i5 = this.checkBlockLine(i39, i41)) == -1) {
+			z10000 = true;
+		} else if(i5 < 6) {
+			z10000 = false;
+		} else {
+			this.heightLimit = i5;
+			z10000 = true;
+		}
+
+		if(!z10000) {
 			return false;
 		} else {
-			this.func_521_a();
-			this.func_518_b();
-			this.func_529_c();
-			this.func_525_d();
+			WorldGenBigTree worldGenBigTree38 = this;
+			this.height = (int)((double)this.heightLimit * this.heightAttenuation);
+			if(this.height >= this.heightLimit) {
+				this.height = this.heightLimit - 1;
+			}
+
+			int i40;
+			if((i40 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D))) <= 0) {
+				i40 = 1;
+			}
+
+			int[][] i42 = new int[i40 * this.heightLimit][4];
+			i4 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
+			i5 = 1;
+			int i43 = this.basePos[1] + this.height;
+			int i7 = i4 - this.basePos[1];
+			i42[0][0] = this.basePos[0];
+			i42[0][1] = i4;
+			i42[0][2] = this.basePos[2];
+			i42[0][3] = i43;
+			--i4;
+
+			int i8;
+			int i11;
+			while(i7 >= 0) {
+				i8 = 0;
+				float f59;
+				if((double)i7 < (double)((float)worldGenBigTree38.heightLimit) * 0.3D) {
+					f59 = -1.618F;
+				} else {
+					float f13 = (float)worldGenBigTree38.heightLimit / 2.0F;
+					float f14;
+					float f36;
+					if((f14 = (float)worldGenBigTree38.heightLimit / 2.0F - (float)i7) == 0.0F) {
+						f36 = f13;
+					} else if(Math.abs(f14) >= f13) {
+						f36 = 0.0F;
+					} else {
+						f36 = (float)Math.sqrt(Math.pow((double)Math.abs(f13), 2.0D) - Math.pow((double)Math.abs(f14), 2.0D));
+					}
+
+					f59 = f36 *= 0.5F;
+				}
+
+				float f9 = f59;
+				if(f59 < 0.0F) {
+					--i4;
+					--i7;
+				} else {
+					for(; i8 < i40; ++i8) {
+						double d19 = worldGenBigTree38.scaleWidth * (double)f9 * ((double)worldGenBigTree38.rand.nextFloat() + 0.328D);
+						double d21 = (double)worldGenBigTree38.rand.nextFloat() * 2.0D * 3.14159D;
+						int i10 = (int)(d19 * Math.sin(d21) + (double)worldGenBigTree38.basePos[0] + 0.5D);
+						i11 = (int)(d19 * Math.cos(d21) + (double)worldGenBigTree38.basePos[2] + 0.5D);
+						int[] i12 = new int[]{i10, i4, i11};
+						int[] i52 = new int[]{i10, i4 + worldGenBigTree38.leafDistanceLimit, i11};
+						if(worldGenBigTree38.checkBlockLine(i12, i52) == -1) {
+							i52 = new int[]{worldGenBigTree38.basePos[0], worldGenBigTree38.basePos[1], worldGenBigTree38.basePos[2]};
+							double d30 = Math.sqrt(Math.pow((double)Math.abs(worldGenBigTree38.basePos[0] - i12[0]), 2.0D) + Math.pow((double)Math.abs(worldGenBigTree38.basePos[2] - i12[2]), 2.0D)) * worldGenBigTree38.branchSlope;
+							if((double)i12[1] - d30 > (double)i43) {
+								i52[1] = i43;
+							} else {
+								i52[1] = (int)((double)i12[1] - d30);
+							}
+
+							if(worldGenBigTree38.checkBlockLine(i52, i12) == -1) {
+								i42[i5][0] = i10;
+								i42[i5][1] = i4;
+								i42[i5][2] = i11;
+								i42[i5][3] = i52[1];
+								++i5;
+							}
+						}
+					}
+
+					--i4;
+					--i7;
+				}
+			}
+
+			worldGenBigTree38.leafNodes = new int[i5][4];
+			System.arraycopy(i42, 0, worldGenBigTree38.leafNodes, 0, i5);
+			worldGenBigTree38 = this;
+			i40 = 0;
+
+			for(i3 = this.leafNodes.length; i40 < i3; ++i40) {
+				i4 = worldGenBigTree38.leafNodes[i40][0];
+				i5 = worldGenBigTree38.leafNodes[i40][1];
+				i43 = worldGenBigTree38.leafNodes[i40][2];
+				int i10001 = i4;
+				i4 = i43;
+				int i49 = i5;
+				i8 = i10001;
+				WorldGenBigTree worldGenBigTree47 = worldGenBigTree38;
+				i5 = i5;
+
+				for(int i56 = i49 + worldGenBigTree38.leafDistanceLimit; i5 < i56; ++i5) {
+					int i22 = i5 - i49;
+					float f20 = i22 >= 0 && i22 < worldGenBigTree47.leafDistanceLimit ? (i22 != 0 && i22 != worldGenBigTree47.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
+					boolean z53 = true;
+					z53 = true;
+					float f51 = f20;
+					WorldGenBigTree worldGenBigTree57 = worldGenBigTree47;
+					int i28 = (int)((double)f20 + 0.618D);
+					byte b29 = otherCoordPairs[1];
+					byte b58 = otherCoordPairs[4];
+					int[] i31 = new int[]{i8, i5, i4};
+					int[] i50 = new int[]{0, 0, 0};
+					i11 = -i28;
+
+					label134:
+					for(i50[1] = i31[1]; i11 <= i28; ++i11) {
+						i50[b29] = i31[b29] + i11;
+						int i55 = -i28;
+
+						while(true) {
+							while(true) {
+								if(i55 > i28) {
+									continue label134;
+								}
+
+								if(Math.sqrt(Math.pow((double)Math.abs(i11) + 0.5D, 2.0D) + Math.pow((double)Math.abs(i55) + 0.5D, 2.0D)) > (double)f51) {
+									++i55;
+								} else {
+									i50[b58] = i31[b58] + i55;
+									int i54;
+									if((i54 = worldGenBigTree57.worldObj.getBlockId(i50[0], i50[1], i50[2])) != 0 && i54 != 18) {
+										++i55;
+									} else {
+										worldGenBigTree57.worldObj.setTileNoUpdate(i50[0], i50[1], i50[2], 18);
+										++i55;
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+
+			i40 = this.basePos[0];
+			i3 = this.basePos[1];
+			i4 = this.basePos[1] + this.height;
+			i5 = this.basePos[2];
+			int[] i44 = new int[]{i40, i3, i5};
+			int[] i48 = new int[]{i40, i4, i5};
+			this.placeBlockLine(i44, i48, 17);
+			if(this.trunkSize == 2) {
+				++i44[0];
+				++i48[0];
+				this.placeBlockLine(i44, i48, 17);
+				++i44[2];
+				++i48[2];
+				this.placeBlockLine(i44, i48, 17);
+				i44[0] += -1;
+				i48[0] += -1;
+				this.placeBlockLine(i44, i48, 17);
+			}
+
+			worldGenBigTree38 = this;
+			i40 = 0;
+			i3 = this.leafNodes.length;
+
+			for(int[] i45 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; i40 < i3; ++i40) {
+				int[] i46 = worldGenBigTree38.leafNodes[i40];
+				i44 = new int[]{i46[0], i46[1], i46[2]};
+				i45[1] = i46[3];
+				i7 = i45[1] - worldGenBigTree38.basePos[1];
+				if((double)i7 >= (double)worldGenBigTree38.heightLimit * 0.2D) {
+					worldGenBigTree38.placeBlockLine(i45, i44, 17);
+				}
+			}
+
 			return true;
 		}
 	}
