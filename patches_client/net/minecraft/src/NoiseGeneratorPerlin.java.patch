--- a/net/minecraft/src/NoiseGeneratorPerlin.java
+++ b/net/minecraft/src/NoiseGeneratorPerlin.java
@@ -36,41 +36,44 @@
 		double d7 = d1 + this.xCoord;
 		double d9 = d3 + this.yCoord;
 		double d11 = d5 + this.zCoord;
-		int i13 = (int)d7;
-		int i14 = (int)d9;
-		int i15 = (int)d11;
-		if(d7 < (double)i13) {
-			--i13;
-		}
-
-		if(d9 < (double)i14) {
-			--i14;
-		}
-
-		if(d11 < (double)i15) {
-			--i15;
-		}
-
-		int i16 = i13 & 255;
-		int i17 = i14 & 255;
-		int i18 = i15 & 255;
-		d7 -= (double)i13;
-		d9 -= (double)i14;
-		d11 -= (double)i15;
-		double d19 = d7 * d7 * d7 * (d7 * (d7 * 6.0D - 15.0D) + 10.0D);
-		double d21 = d9 * d9 * d9 * (d9 * (d9 * 6.0D - 15.0D) + 10.0D);
-		double d23 = d11 * d11 * d11 * (d11 * (d11 * 6.0D - 15.0D) + 10.0D);
-		int i25 = this.permutations[i16] + i17;
-		int i26 = this.permutations[i25] + i18;
-		int i27 = this.permutations[i25 + 1] + i18;
-		int i28 = this.permutations[i16 + 1] + i17;
-		int i29 = this.permutations[i28] + i18;
-		int i30 = this.permutations[i28 + 1] + i18;
-		return this.lerp(d23, this.lerp(d21, this.lerp(d19, this.grad(this.permutations[i26], d7, d9, d11), this.grad(this.permutations[i29], d7 - 1.0D, d9, d11)), this.lerp(d19, this.grad(this.permutations[i27], d7, d9 - 1.0D, d11), this.grad(this.permutations[i30], d7 - 1.0D, d9 - 1.0D, d11))), this.lerp(d21, this.lerp(d19, this.grad(this.permutations[i26 + 1], d7, d9, d11 - 1.0D), this.grad(this.permutations[i29 + 1], d7 - 1.0D, d9, d11 - 1.0D)), this.lerp(d19, this.grad(this.permutations[i27 + 1], d7, d9 - 1.0D, d11 - 1.0D), this.grad(this.permutations[i30 + 1], d7 - 1.0D, d9 - 1.0D, d11 - 1.0D))));
-	}
-
-	public final double lerp(double d1, double d3, double d5) {
-		return d3 + d1 * (d5 - d3);
+		int i22 = MathHelper.floor_double(d7) & 255;
+		int i2 = MathHelper.floor_double(d9) & 255;
+		int i23 = MathHelper.floor_double(d11) & 255;
+		d7 -= (double)MathHelper.floor_double(d7);
+		d9 -= (double)MathHelper.floor_double(d9);
+		d11 -= (double)MathHelper.floor_double(d11);
+		double d16 = generateNoise(d7);
+		double d18 = generateNoise(d9);
+		double d20 = generateNoise(d11);
+		int i4 = this.permutations[i22] + i2;
+		int i24 = this.permutations[i4] + i23;
+		i4 = this.permutations[i4 + 1] + i23;
+		i22 = this.permutations[i22 + 1] + i2;
+		i2 = this.permutations[i22] + i23;
+		i22 = this.permutations[i22 + 1] + i23;
+		return lerp(d20, lerp(d18, lerp(d16, grad(this.permutations[i24], d7, d9, d11), grad(this.permutations[i2], d7 - 1.0D, d9, d11)), lerp(d16, grad(this.permutations[i4], d7, d9 - 1.0D, d11), grad(this.permutations[i22], d7 - 1.0D, d9 - 1.0D, d11))), lerp(d18, lerp(d16, grad(this.permutations[i24 + 1], d7, d9, d11 - 1.0D), grad(this.permutations[i2 + 1], d7 - 1.0D, d9, d11 - 1.0D)), lerp(d16, grad(this.permutations[i4 + 1], d7, d9 - 1.0D, d11 - 1.0D), grad(this.permutations[i22 + 1], d7 - 1.0D, d11 - 1.0D, d11 - 1.0D))));
+	}
+
+	private static double generateNoise(double d0) {
+		return d0 * d0 * d0 * (d0 * (d0 * 6.0D - 15.0D) + 10.0D);
+	}
+
+	private static double lerp(double d0, double d2, double d4) {
+		return d2 + d0 * (d4 - d2);
+	}
+
+	private static double grad(int i0, double d1, double d3, double d5) {
+		double d8 = (i0 &= 15) < 8 ? d1 : d3;
+		double d10 = i0 < 4 ? d3 : (i0 != 12 && i0 != 14 ? d5 : d1);
+		return ((i0 & 1) == 0 ? d8 : -d8) + ((i0 & 2) == 0 ? d10 : -d10);
+	}
+
+	public final double generateNoise(double d1, double d3) {
+		return this.generateNoise(d1, d3, 0.0D);
+	}
+
+	public final double generateNoiseD(double d1, double d3, double d5) {
+		return this.generateNoise(d1, d3, d5);
 	}
 
 	public final double func_4110_a(int i1, double d2, double d4) {
@@ -78,17 +81,6 @@
 		double d7 = (double)(1 - ((i6 & 8) >> 3)) * d2;
 		double d9 = i6 < 4 ? 0.0D : (i6 != 12 && i6 != 14 ? d4 : d2);
 		return ((i6 & 1) == 0 ? d7 : -d7) + ((i6 & 2) == 0 ? d9 : -d9);
-	}
-
-	public final double grad(int i1, double d2, double d4, double d6) {
-		int i8 = i1 & 15;
-		double d9 = i8 < 8 ? d2 : d4;
-		double d11 = i8 < 4 ? d4 : (i8 != 12 && i8 != 14 ? d6 : d2);
-		return ((i8 & 1) == 0 ? d9 : -d9) + ((i8 & 2) == 0 ? d11 : -d11);
-	}
-
-	public double func_801_a(double d1, double d3) {
-		return this.generateNoise(d1, d3, 0.0D);
 	}
 
 	public void func_805_a(double[] d1, double d2, double d4, double d6, int i8, int i9, int i10, double d11, double d13, double d15, double d17) {
